//      _____         ___  
//     / __(_)__  ___/ (_)
//    _\ \/ / _ \/ _  / /
//   /___/_/_//_/\_,_/_/
//
//  (c) 2012, Alois Cochard
//
//  http://aloiscochard.github.com/sindi
//

package sindi

trait AutowiringResolver0[Q] { self: Autowiring[Q] =>
  implicit def bindingOrWireL[A, B](implicit w: Wire[A]): Lookup[A, B] = Left(w)
}

trait AutowiringResolver[Q] extends AutowiringResolver0[Q] { self: Autowiring[Q] =>
  implicit def bindingOrWireR[A, B](implicit b: Binding[A, B]): Lookup[A, B] = Right(b)
}

trait Autowiring[Q] extends AutowiringResolver[Q] { self: Wiring[Q] =>

  type Lookup[A, B] = Either[Wire[A], Binding[A, B]]

  private def resolve[A, B](lookup: Lookup[A, B]): A = lookup match {
    case Right(binding) => binding.inject
    case Left(wire) => wire()
  }

  def autowire[A, B](f: (A) => B)(implicit lookup: Lookup[A, B]): B = f(resolve(lookup))

  /*
  def autowire[
    A0, A1, 
    B
  ](f: (
    A0, A1
  ) => B)
    (implicit 
      w0: Wire[A0], w1: Wire[A1]
    ): B =
      f(
        w0(), w1()
      )
  */

  <#list 1..21 as i>
  def autowire[
  <#list 0..i as j>
    A${j},
  </#list>
    B
  ](f: (
  <#list 0..i as j>
    A${j}<#if i !=j>,</#if>
  </#list>
  ) => B)
    (implicit 
  <#list 0..i as j>
     lookup${j}: Lookup[A${j}, B]<#if i !=j>,</#if>
  </#list>
    ): B =
      f(
  <#list 0..i as j>
     resolve(lookup${j})<#if i !=j>,</#if>
  </#list>
      )
  </#list>

  /*
  def <<<[
    A0, A1, 
    B
  ](f: (
    A0, A1
  ) => B)
    (implicit 
      w0: Wire[A0], w1: Wire[A1]
    ): B =
      autowire(f)
  */

  <#list 1..21 as i>
  def <<<[
  <#list 0..i as j>
    A${j},
  </#list>
    B
  ](f: (
  <#list 0..i as j>
    A${j}<#if i !=j>,</#if>
  </#list>
  ) => B)
    (implicit 
  <#list 0..i as j>
     lookup${j}: Lookup[A${j}, B]<#if i !=j>,</#if>
  </#list>
    ): B =
      autowire(f)
  </#list>
}
